#!/usr/bin/env python3

import os
import subprocess

from subprocess import PIPE

CMD_SPY = ['xprop', '-root', '-spy', '_NET_ACTIVE_WINDOW']

home_dir = os.environ.get('HOME')
last_profile_dir = os.path.join(home_dir, '.local/var/last-firefox-profile/')
os.makedirs(last_profile_dir, exist_ok=True)

def write_profile(data):
    p = os.path.join(last_profile_dir, 'profile')
    with open(p, 'w') as f:
        f.write(data)

    print('Wrote', data, 'to', p)

def process_line(line):
    line = str(line.strip())
    win_id = line.split(' ')[-1]
    cmd_win_id = ['xprop', '-id', win_id, '_NET_WM_PID']
    result = subprocess.run(cmd_win_id, universal_newlines=True, encoding='utf-8', capture_output=True)
    pid = str(result.stdout).split(' = ')[-1].strip()
    cmd_get_cmd = ['ps', '-p', pid, '-o', 'cmd', 'h']
    result = subprocess.run(cmd_get_cmd, universal_newlines=True, encoding='utf-8', capture_output=True)
    cmdline = result.stdout.strip()

    cmd_line_parts = cmdline.split(' ')

    exe_basename = os.path.basename(cmd_line_parts[0])
    if exe_basename != 'firefox':
        print("Not firefox", exe_basename)
        return

    p_flag_idx = cmd_line_parts.index('-P')
    if not p_flag_idx:
        print("Invalid -P flag", cmd_line_parts)
        return

    profile_name = cmd_line_parts[p_flag_idx + 1]
    if not profile_name:
        print('No profile name', cmd_line_parts)
        return

    print("Got profile name", profile_name)
    write_profile(profile_name)

with subprocess.Popen(CMD_SPY, universal_newlines=True, stdout=PIPE, encoding='utf-8') as p:
    for line in p.stdout:
        try:
            process_line(line)
        except Exception as e:
            print('Err', e)
